import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Helmet } from 'react-helmet';
import { Heart, Cloud, Sun, Zap } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Slider } from '@/components/ui/slider';
import { Textarea } from '@/components/ui/textarea';
import { toast } from '@/components/ui/use-toast';
import { useJournal } from '@/contexts/JournalContext';
import MoodChart from '@/components/MoodChart.jsx';
import AIResponse from '@/components/AIResponse.jsx';
import LoginModal from '@/components/LoginModal.jsx';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

const Home = () => {
  const { currentUser, addEntry } = useJournal();
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [responses, setResponses] = useState({
    mood: [5],
    anxiety: '',
    joy: '',
    thought: '',
    energy: '—Å—Ä–µ–¥–Ω—è—è'
  });
  const [aiData, setAiData] = useState({ response: '', advice: '', emoji: '' });
  const [showResults, setShowResults] = useState(false);

  const quotes = [
    "–î–∞–∂–µ —Å–∞–º—ã–π —Ç—ë–º–Ω—ã–π —á–∞—Å –¥–ª–∏—Ç—Å—è –≤—Å–µ–≥–æ 60 –º–∏–Ω—É—Ç.",
    "–¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ ‚Äî —ç—Ç–æ –∫–∞–∫ –ø–æ–≥–æ–¥–∞. –û–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏ —É—Ö–æ–¥—è—Ç.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø–æ–ª–∏–≤–∞—Ç—å —Å–≤–æ–∏ –º–µ—á—Ç—ã. –ò —Å–µ–±—è —Ç–æ–∂–µ.",
    "–ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è, –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π —Å–ª–µ–¥—É—é—â–∏–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥.",
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º —Ç–≤–æ–π —Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π —ç—Å–ø—Ä–µ—Å—Å–æ."
  ];
  const [quote, setQuote] = useState('');

  useEffect(() => {
    setQuote(quotes[Math.floor(Math.random() * quotes.length)]);
  }, []);

  const questions = [
    { id: 'mood', title: '–û—Ü–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10', type: 'slider', min: 1, max: 10, labels: ['–¢–∞–∫ —Å–µ–±–µ', '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ'], icon: Heart },
    { id: 'anxiety', title: '–ß—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç?', type: 'textarea', placeholder: '–ú–æ–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–º, —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è...', icon: Cloud },
    { id: 'joy', title: '–ß—Ç–æ –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è?', type: 'textarea', placeholder: '–î–∞–∂–µ –º–µ–ª–æ—á–∏ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ...', icon: Sun },
    { id: 'thought', title: '–ú—ã—Å–ª—å –¥–Ω—è', type: 'textarea', placeholder: '–ö–∞–∫–∞—è –∏–¥–µ—è –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∞ –∏–∑ –≥–æ–ª–æ–≤—ã?', icon: Zap },
    { id: 'energy', title: '–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è —Å–µ–≥–æ–¥–Ω—è', type: 'tabs', options: ['–Ω–∏–∑–∫–∞—è', '—Å—Ä–µ–¥–Ω—è—è', '–≤—ã—Å–æ–∫–∞—è'], icon: Zap }
  ];

  useEffect(() => {
    if (!currentUser) {
      setShowLoginModal(true);
    }
  }, [currentUser]);

  const handleInputChange = (questionId, value) => {
    setResponses(prev => ({ ...prev, [questionId]: value }));
  };

  const nextStep = () => {
    if (currentStep < questions.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      handleSubmit();
    }
  };

  const prevStep = () => {
    if (currentStep > 0) setCurrentStep(currentStep - 1);
  };

  const generateAIStuff = (responses) => {
    const { mood: [mood], anxiety, joy, energy } = responses;
    let ai_response = '';
    let advice = '';
    let emoji = 'üòê';

    if (mood >= 8) {
      ai_response = '–û–≥–æ, –¥–∞ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å—Ç–æ —Ö–æ–¥—è—á–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫! –ï—Å–ª–∏ –±—ã —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—ã–ª–æ –∞–∫—Ü–∏–µ–π, —è –±—ã –≤—Å—ë –≤–ª–æ–∂–∏–ª –≤ —Ç–µ–±—è. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!';
      advice = '–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π —Å –∫–µ–º-–Ω–∏–±—É–¥—å, —ç—Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è —Å—Ç–æ—Ä–∏—Ü–µ–π. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫—É–ø–∏ —Å–µ–±–µ —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ, —Ç—ã –∑–∞—Å–ª—É–∂–∏–ª!';
      emoji = 'üéâ';
    } else if (mood >= 6) {
      ai_response = '–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! –ù–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ –∫—Ç–æ –≤–æ–æ–±—â–µ –∏–¥–µ–∞–ª–µ–Ω? –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.';
      advice = '–í–µ—á–µ—Ä–æ–º –ø–æ—Å–º–æ—Ç—Ä–∏ –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª. –ù–µ–º–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ ‚Äî —Ç–æ, —á—Ç–æ –¥–æ–∫—Ç–æ—Ä –ø—Ä–æ–ø–∏—Å–∞–ª.';
      emoji = 'üòä';
    } else if (mood >= 4) {
      ai_response = '–¢–∞–∫, –¥–µ–Ω—å –±—ã–ª –Ω–µ –∏–∑ –ª—ë–≥–∫–∏—Ö, –Ω–æ —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è. –≠—Ç–æ –∫–∞–∫ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ: –±–µ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Ç —Ä–æ—Å—Ç–∞. –¢—ã —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–∫–∞—á–∞–ª—Å—è!';
      advice = '–ü–æ–ø—Ä–æ–±—É–π –ª–µ—á—å —Å–ø–∞—Ç—å –ø–æ—Ä–∞–Ω—å—à–µ. –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –Ω–æ–≤—ã–µ —Å–∏–ª—ã.';
      emoji = 'ü§î';
    } else {
      ai_response = '–ü–æ–Ω–∏–º–∞—é, —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ —Ç—è–∂–µ–ª–æ. –ü–æ–º–Ω–∏, –¥–∞–∂–µ —É —Å–∞–º—ã—Ö –∫—Ä—É—Ç—ã—Ö —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–≤ –±—ã–≤–∞—é—Ç –ø–ª–æ—Ö–∏–µ –¥–Ω–∏. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Ç—ã –∑–¥–µ—Å—å, –∏ —ç—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.';
      advice = '–ó–∞–≤–∞—Ä–∏ —Å–µ–±–µ –≤–∫—É—Å–Ω—ã–π —á–∞–π –∏ –æ–±–Ω–∏–º–∏ –ø–æ–¥—É—à–∫—É. –ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –±—ã—Ç—å —Å–ª–∞–±—ã–º —Å–µ–≥–æ–¥–Ω—è.';
      emoji = 'üòî';
    }

    if (joy.length > 5) {
      ai_response += ' –ê –µ—â—ë –∏ —Ä–∞–¥–æ—Å—Ç—å –±—ã–ª–∞! –¢—ã –ø—Ä–æ—Å—Ç–æ –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –∑–∞–º–µ—á–∞–µ—à—å —Ö–æ—Ä–æ—à–µ–µ.';
    }
    if (anxiety.length > 5) {
      ai_response += ' –¢—Ä–µ–≤–æ–≥–∏ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –¢—ã –≤—ã–≥–æ–≤–æ—Ä–∏–ª—Å—è, –∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–¥–µ–ª–∞.';
    }
    if (energy === '–Ω–∏–∑–∫–∞—è') {
      advice = '–¢–≤–æ—è –±–∞—Ç–∞—Ä–µ–π–∫–∞ –ø–æ—á—Ç–∏ –Ω–∞ –Ω—É–ª–µ. –°—Ä–æ—á–Ω–æ –Ω–∞ –ø–æ–¥–∑–∞—Ä—è–¥–∫—É! –û—Ç–¥—ã—Ö ‚Äî —ç—Ç–æ –Ω–µ —Ä–æ—Å–∫–æ—à—å, –∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å.';
    }

    setAiData({ response: ai_response, advice, emoji });
  };

  const handleSubmit = () => {
    if (!currentUser) {
      toast({ title: "–û—à–∏–±–∫–∞", description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É", variant: "destructive" });
      return;
    }
    addEntry(responses);
    generateAIStuff(responses);
    setShowResults(true);
    toast({ title: "–î–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! üéâ", description: "–¢–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –¥–Ω–µ–≤–Ω–∏–∫" });
  };

  const resetForm = () => {
    setCurrentStep(0);
    setResponses({ mood: [5], anxiety: '', joy: '', thought: '', energy: '—Å—Ä–µ–¥–Ω—è—è' });
    setShowResults(false);
    setAiData({ response: '', advice: '', emoji: '' });
  };

  const getMoodClass = () => (responses.mood[0] <= 3 ? 'mood-sad' : '');

  if (showResults) {
    return (
      <div className={`min-h-full ${getMoodClass()}`}>
        <Helmet><title>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–Ω—è - Moy-Den</title></Helmet>
        <div className="floating-clouds">{[...Array(5)].map((_, i) => <div key={i} className="cloud" style={{ width: `${60 + Math.random() * 40}px`, height: `${30 + Math.random() * 20}px`, top: `${Math.random() * 60}%`, animationDelay: `${Math.random() * 20}s`, animationDuration: `${15 + Math.random() * 10}s` }} />)}</div>
        <div className="max-w-4xl mx-auto px-4 py-8">
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="space-y-8">
            <div className="text-center">
              <motion.div initial={{ scale: 0 }} animate={{ scale: 1 }} transition={{ delay: 0.2, type: 'spring' }} className="text-6xl mb-4">{aiData.emoji}</motion.div>
              <h1 className="text-3xl font-bold mb-4">–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è!</h1>
              <p className="text-muted-foreground">–í–æ—Ç —á—Ç–æ —è –¥—É–º–∞—é –æ —Ç–≤–æ—ë–º –¥–Ω–µ:</p>
            </div>
            <AIResponse response={aiData.response} advice={aiData.advice} />
            <MoodChart />
            <div className="text-center"><Button onClick={resetForm} size="lg" className="rounded-full">–ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å</Button></div>
          </motion.div>
        </div>
      </div>
    );
  }

  const currentQuestion = questions[currentStep];
  const Icon = currentQuestion.icon;

  return (
    <div className={`min-h-full ${getMoodClass()}`}>
      <Helmet><title>–ö–∞–∫ —Ç—ã —Å–µ–≥–æ–¥–Ω—è? - Moy-Den</title></Helmet>
      <div className="floating-clouds">{[...Array(5)].map((_, i) => <div key={i} className="cloud" style={{ width: `${60 + Math.random() * 40}px`, height: `${30 + Math.random() * 20}px`, top: `${Math.random() * 60}%`, animationDelay: `${Math.random() * 20}s`, animationDuration: `${15 + Math.random() * 10}s` }} />)}</div>
      <div className="max-w-2xl mx-auto px-4 py-8">
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="space-y-8">
          <div className="text-center">
            <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-purple-500 to-blue-500 bg-clip-text text-transparent">–ö–∞–∫ —Ç—ã —Å–µ–≥–æ–¥–Ω—è?</h1>
            <p className="text-muted-foreground italic">"{quote}"</p>
          </div>
          <div className="w-full bg-secondary rounded-full h-2.5"><motion.div className="bg-primary h-2.5 rounded-full" initial={{ width: 0 }} animate={{ width: `${((currentStep + 1) / questions.length) * 100}%` }} transition={{ duration: 0.5, ease: "easeInOut" }} /></div>
          <AnimatePresence mode="wait">
            <motion.div key={currentStep} initial={{ opacity: 0, x: 30 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -30 }} transition={{ duration: 0.3 }}>
              <Card className="p-8 glass-effect rounded-2xl">
                <div className="text-center mb-8">
                  <Icon className="w-12 h-12 mx-auto mb-4 text-primary" />
                  <h2 className="text-2xl font-semibold">{currentQuestion.title}</h2>
                </div>
                {currentQuestion.type === 'slider' && (
                  <div className="space-y-4">
                    <Slider value={responses[currentQuestion.id]} onValueChange={(v) => handleInputChange(currentQuestion.id, v)} max={currentQuestion.max} min={currentQuestion.min} step={1} />
                    <div className="flex justify-between text-sm text-muted-foreground"><span>{currentQuestion.labels[0]}</span><span className="font-semibold text-lg text-primary">{responses[currentQuestion.id][0]}</span><span>{currentQuestion.labels[1]}</span></div>
                  </div>
                )}
                {currentQuestion.type === 'textarea' && <Textarea value={responses[currentQuestion.id]} onChange={(e) => handleInputChange(currentQuestion.id, e.target.value)} placeholder={currentQuestion.placeholder} className="min-h-[120px] resize-none rounded-xl" />}
                {currentQuestion.type === 'tabs' && (
                  <Tabs value={responses[currentQuestion.id]} onValueChange={(v) => handleInputChange(currentQuestion.id, v)} className="w-full">
                    <TabsList className="grid w-full grid-cols-3">
                      {currentQuestion.options.map(opt => <TabsTrigger key={opt} value={opt} className="capitalize">{opt}</TabsTrigger>)}
                    </TabsList>
                  </Tabs>
                )}
              </Card>
            </motion.div>
          </AnimatePresence>
          <div className="flex justify-between">
            <Button variant="outline" onClick={prevStep} disabled={currentStep === 0} className="rounded-full">–ù–∞–∑–∞–¥</Button>
            <Button onClick={nextStep} className="rounded-full">{currentStep === questions.length - 1 ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–Ω—å' : '–î–∞–ª–µ–µ'}</Button>
          </div>
        </motion.div>
      </div>
      <LoginModal isOpen={showLoginModal} onClose={() => setShowLoginModal(false)} />
    </div>
  );
};

export default Home;